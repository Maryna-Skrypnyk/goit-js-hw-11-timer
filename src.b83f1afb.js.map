{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","onTick","onChangeLabel","intervalId","start","setInterval","currentDate","Date","now","deltaTime","clearInterval","timeComponents","getTimeComponents","time","days","pad","Math","floor","hours","mins","secs","value","String","padStart","timer","updateTimerFace","updateLabelFace","document","querySelector","textContent","startTimer"],"mappings":";;;AA+HA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA9HA,QAAA,oBAEMA,IAAAA,EAAAA,WACyD,SAAA,EAAA,GAA/CC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,cAAiB,EAAA,KAAA,GACtDH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbG,KAAAA,WAAa,KACbF,KAAAA,OAASA,EACTC,KAAAA,cAAgBA,EAsHzB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aAnHE,MAAA,WAAa,IAAA,EAAA,KACNE,KAAAA,QACAD,KAAAA,WAAaE,YAAY,WAC5B,EAAKD,SACJ,OA+GP,CAAA,IAAA,QA5GE,MAAA,WACQE,IAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKT,WAAaM,EAChCG,GAAAA,GAAa,EACfC,cAAc,KAAKP,gBADjBM,CAIEE,IAAAA,EAAiB,KAAKC,kBAAkBH,GACzCR,KAAAA,OAAOU,GACPT,KAAAA,cAAcS,MAmGvB,CAAA,IAAA,oBAhGE,MAAA,SAAkBE,GAQT,MAAA,CAAEC,KAPI,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QAO1BK,MAND,KAAKH,IACjBC,KAAKC,MAAOJ,EAAQ,MAAyB,OAKzBM,KAHT,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAGlCO,KAFf,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,SA0F5D,CAAA,IAAA,MArFE,MAAA,SAAIQ,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAoFrC,EA5HMzB,GA4CA0B,EAAQ,IAAI1B,EAAe,CAC/BC,SAAU,WACVC,WAAY,IAAIO,KAAK,gBAErBN,OAAQwB,EACRvB,cAAewB,IAGjB,SAASD,EAA6C,GAA3BX,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC5CO,SAASC,cAAc,uBAAuBC,YAAcf,EAC5Da,SAASC,cAAc,wBAAwBC,YAAcX,EAC7DS,SAASC,cAAc,uBAAuBC,YAAcV,EAC5DQ,SAASC,cAAc,uBAAuBC,YAAcT,EAG9D,SAASM,EAA6C,GAA3BZ,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC5CO,SAASC,cAAc,qBAAqBC,YAClC,GAARf,EAAY,MAAQ,OACtBa,SAASC,cAAc,sBAAsBC,YAClC,GAATX,EAAa,OAAS,QACxBS,SAASC,cAAc,qBAAqBC,YAClC,GAARV,EAAY,SAAW,UACzBQ,SAASC,cAAc,qBAAqBC,YAClC,GAART,EAAY,SAAW,UAG3BI,EAAMM","file":"src.b83f1afb.js","sourceRoot":"..\\src","sourcesContent":["// import timerTpl from './templates/timer.hbs';\nimport './sass/main.scss';\n\nclass CountdownTimer {\n  constructor({ selector, targetDate, onTick, onChangeLabel }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.intervalId = null;\n    this.onTick = onTick;\n    this.onChangeLabel = onChangeLabel;\n  }\n\n  startTimer() {\n    this.start();\n    this.intervalId = setInterval(() => {\n      this.start();\n    }, 1000);\n  }\n\n  start() {\n    const currentDate = Date.now();\n    const deltaTime = this.targetDate - currentDate;\n    if (deltaTime <= 0) {\n      clearInterval(this.intervalId);\n      return;\n    }\n    const timeComponents = this.getTimeComponents(deltaTime);\n    this.onTick(timeComponents);\n    this.onChangeLabel(timeComponents);\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Sep 27, 2021'),\n  // targetDate: new Date('May 22, 2021 14:41:00'),\n  onTick: updateTimerFace,\n  onChangeLabel: updateLabelFace,\n});\n\nfunction updateTimerFace({ days, hours, mins, secs }) {\n  document.querySelector('[data-value=\"days\"]').textContent = days;\n  document.querySelector('[data-value=\"hours\"]').textContent = hours;\n  document.querySelector('[data-value=\"mins\"]').textContent = mins;\n  document.querySelector('[data-value=\"secs\"]').textContent = secs;\n}\n\nfunction updateLabelFace({ days, hours, mins, secs }) {\n  document.querySelector('[data-label-days]').textContent =\n    days == 1 ? 'Day' : 'Days';\n  document.querySelector('[data-label-hours]').textContent =\n    hours == 1 ? 'Hour' : 'Hours';\n  document.querySelector('[data-label-mins]').textContent =\n    mins == 1 ? 'Minute' : 'Minutes';\n  document.querySelector('[data-label-secs]').textContent =\n    secs == 1 ? 'Second' : 'Seconds';\n}\n\ntimer.startTimer();\n\n// const timerRef = document.querySelector('#timer-1');\n// const daysRef = document.querySelector('[data-value=\"days\"]');\n// const hoursRef = document.querySelector('[data-value=\"hours\"]');\n// const minutesRef = document.querySelector('[data-value=\"mins\"]');\n// const secondsRef = document.querySelector('[data-value=\"secs\"]');\n\n// // const timerMarkup = timerTpl();\n// // timerRef.insertAdjacentHTML('beforeend', timerMarkup);\n\n// const timer = {\n//   intervalId: null,\n\n//   startTimer() {\n//     const targetDate = new Date('Sep 27, 2021');\n\n//     this.intervalId = setInterval(() => {\n//       const currentDate = Date.now();\n//       const deltaTime = targetDate - currentDate;\n//       const timeComponents = getTimeComponents(deltaTime);\n//       // const { days, hours, mins, secs } = getTimeComponents(deltaTime);\n\n//       updateTimerFace(timeComponents);\n\n//       console.log(timeComponents);\n//       // console.log(`${days}:${hours}:${mins}:${secs}`);\n//     }, 1000);\n//   },\n// };\n\n// timer.startTimer();\n\n// function updateTimerFace({ days, hours, mins, secs }) {\n//   // timerRef.textContent = `${days}:${hours}:${mins}:${secs}`;\n//   daysRef.textContent = `${days}`;\n//   hoursRef.textContent = `${hours}`;\n//   minutesRef.textContent = `${mins}`;\n//   secondsRef.textContent = `${secs}`;\n// }\n\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// function getTimeComponents(time) {\n//   const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n//   const hours = pad(\n//     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n//   );\n//   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//   return { days, hours, mins, secs };\n// }\n"]}