{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","onTick","onChangeLabel","intervalId","setInterval","currentDate","Date","now","deltaTime","clearInterval","timeComponents","getTimeComponents","time","days","pad","Math","floor","hours","mins","secs","value","String","padStart","timer","updateTimerFace","updateLabelFace","document","querySelector","textContent","startTimer"],"mappings":";;;AAgIA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/HA,QAAA,oBAEMA,IAAAA,EAAAA,WACyD,SAAA,EAAA,GAA/CC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,cAAiB,EAAA,KAAA,GACtDH,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbG,KAAAA,WAAa,KACbF,KAAAA,OAASA,EACTC,KAAAA,cAAgBA,EAuHzB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aApHE,MAAA,WAAa,IAAA,EAAA,KACNC,KAAAA,WAAaC,YAAY,WACtBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAY,EAAKR,WAAaK,EAChCG,GAAAA,GAAa,EACfC,cAAc,EAAKN,gBADjBK,CAKEE,IAAAA,EAAiB,EAAKC,kBAAkBH,GAC9C,EAAKP,OAAOS,GACZ,EAAKR,cAAcQ,KAElB,OAuGP,CAAA,IAAA,oBApGE,MAAA,SAAkBE,GAQT,MAAA,CAAEC,KAPI,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QAO1BK,MAND,KAAKH,IACjBC,KAAKC,MAAOJ,EAAQ,MAAyB,OAKzBM,KAHT,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAGlCO,KAFf,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,SA8F5D,CAAA,IAAA,MAzFE,MAAA,SAAIQ,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAwFrC,EA7HMxB,GAyCAyB,EAAQ,IAAIzB,EAAe,CAC/BC,SAAU,WACVC,WAAY,IAAIM,KAAK,gBAErBL,OAAQuB,EACRtB,cAAeuB,IAGjB,SAASD,EAA6C,GAA3BX,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC5CO,SAASC,cAAc,uBAAuBC,YAAiBf,GAAAA,OAAAA,GAC/Da,SAASC,cAAc,wBAAwBC,YAAiBX,GAAAA,OAAAA,GAChES,SAASC,cAAc,uBAAuBC,YAAiBV,GAAAA,OAAAA,GAC/DQ,SAASC,cAAc,uBAAuBC,YAAiBT,GAAAA,OAAAA,GAGjE,SAASM,EAA6C,GAA3BZ,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC/B,GAAVN,GAAAA,OAAAA,GACEa,SAASC,cAAc,qBAAqBC,YAAc,MAC1DF,SAASC,cAAc,qBAAqBC,YAAc,OACjD,GAAXX,GAAAA,OAAAA,GACES,SAASC,cAAc,sBAAsBC,YAAc,OAC3DF,SAASC,cAAc,sBAAsBC,YAAc,QACnD,GAAVV,GAAAA,OAAAA,GACEQ,SAASC,cAAc,qBAAqBC,YAAc,SAC1DF,SAASC,cAAc,qBAAqBC,YAAc,UAClD,GAAVT,GAAAA,OAAAA,GACEO,SAASC,cAAc,qBAAqBC,YAAc,SAC1DF,SAASC,cAAc,qBAAqBC,YAAc,UAGjEL,EAAMM","file":"src.93c98e98.js","sourceRoot":"..\\src","sourcesContent":["// import timerTpl from './templates/timer.hbs';\nimport './sass/main.scss';\n\nclass CountdownTimer {\n  constructor({ selector, targetDate, onTick, onChangeLabel }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.intervalId = null;\n    this.onTick = onTick;\n    this.onChangeLabel = onChangeLabel;\n  }\n\n  startTimer() {\n    this.intervalId = setInterval(() => {\n      const currentDate = Date.now();\n      const deltaTime = this.targetDate - currentDate;\n      if (deltaTime <= 0) {\n        clearInterval(this.intervalId);\n        return;\n      }\n\n      const timeComponents = this.getTimeComponents(deltaTime);\n      this.onTick(timeComponents);\n      this.onChangeLabel(timeComponents);\n      // console.log(timeComponents);\n    }, 1000);\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Sep 27, 2021'),\n  // targetDate: new Date('May 21, 2021 22:25:00'),\n  onTick: updateTimerFace,\n  onChangeLabel: updateLabelFace,\n});\n\nfunction updateTimerFace({ days, hours, mins, secs }) {\n  document.querySelector('[data-value=\"days\"]').textContent = `${days}`;\n  document.querySelector('[data-value=\"hours\"]').textContent = `${hours}`;\n  document.querySelector('[data-value=\"mins\"]').textContent = `${mins}`;\n  document.querySelector('[data-value=\"secs\"]').textContent = `${secs}`;\n}\n\nfunction updateLabelFace({ days, hours, mins, secs }) {\n  `${days}` == 1\n    ? (document.querySelector('[data-label-days]').textContent = 'Day')\n    : (document.querySelector('[data-label-days]').textContent = 'Days');\n  `${hours}` == 1\n    ? (document.querySelector('[data-label-hours]').textContent = 'Hour')\n    : (document.querySelector('[data-label-hours]').textContent = 'Hours');\n  `${mins}` == 1\n    ? (document.querySelector('[data-label-mins]').textContent = 'Minute')\n    : (document.querySelector('[data-label-mins]').textContent = 'Minutes');\n  `${secs}` == 1\n    ? (document.querySelector('[data-label-secs]').textContent = 'Second')\n    : (document.querySelector('[data-label-secs]').textContent = 'Seconds');\n}\n\ntimer.startTimer();\n\n// const timerRef = document.querySelector('#timer-1');\n// const daysRef = document.querySelector('[data-value=\"days\"]');\n// const hoursRef = document.querySelector('[data-value=\"hours\"]');\n// const minutesRef = document.querySelector('[data-value=\"mins\"]');\n// const secondsRef = document.querySelector('[data-value=\"secs\"]');\n\n// // const timerMarkup = timerTpl();\n// // timerRef.insertAdjacentHTML('beforeend', timerMarkup);\n\n// const timer = {\n//   intervalId: null,\n\n//   startTimer() {\n//     const targetDate = new Date('Sep 27, 2021');\n\n//     this.intervalId = setInterval(() => {\n//       const currentDate = Date.now();\n//       const deltaTime = targetDate - currentDate;\n//       const timeComponents = getTimeComponents(deltaTime);\n//       // const { days, hours, mins, secs } = getTimeComponents(deltaTime);\n\n//       updateTimerFace(timeComponents);\n\n//       console.log(timeComponents);\n//       // console.log(`${days}:${hours}:${mins}:${secs}`);\n//     }, 1000);\n//   },\n// };\n\n// timer.startTimer();\n\n// function updateTimerFace({ days, hours, mins, secs }) {\n//   // timerRef.textContent = `${days}:${hours}:${mins}:${secs}`;\n//   daysRef.textContent = `${days}`;\n//   hoursRef.textContent = `${hours}`;\n//   minutesRef.textContent = `${mins}`;\n//   secondsRef.textContent = `${secs}`;\n// }\n\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// function getTimeComponents(time) {\n//   const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n//   const hours = pad(\n//     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n//   );\n//   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//   return { days, hours, mins, secs };\n// }\n"]}