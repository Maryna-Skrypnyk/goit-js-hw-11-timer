{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","onTick","intervalId","setInterval","currentDate","Date","now","deltaTime","clearInterval","timeComponents","getTimeComponents","console","log","time","days","pad","Math","floor","hours","mins","secs","value","String","padStart","timer","updateTimerFace","document","querySelector","textContent","startTimer"],"mappings":";;;AAiHA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAhHA,QAAA,oBAEMA,IAAAA,EAAAA,WAC0C,SAAA,EAAA,GAAhCC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAYC,EAAAA,EAAAA,OAAU,EAAA,KAAA,GACvCF,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAEbC,KAAAA,OAASA,EAyGlB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aAtGE,MAAA,WAAa,IAAA,EAAA,KACNC,KAAAA,WAAaC,YAAY,WACtBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAY,EAAKP,WAAaI,EAChCG,GAAAA,GAAa,EACfC,cAAc,EAAKN,gBADjBK,CAKEE,IAAAA,EAAiB,EAAKC,kBAAkBH,GAC9C,EAAKN,OAAOQ,GAEZE,QAAQC,IAAIH,KACX,OAyFP,CAAA,IAAA,oBAtFE,MAAA,SAAkBI,GAQT,MAAA,CAAEC,KAPI,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QAO1BK,MAND,KAAKH,IACjBC,KAAKC,MAAOJ,EAAQ,MAAyB,OAKzBM,KAHT,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAGlCO,KAFf,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,SAgF5D,CAAA,IAAA,MA3EE,MAAA,SAAIQ,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SA0ErC,EA9GMzB,GAwCA0B,EAAQ,IAAI1B,EAAe,CAC/BC,SAAU,WACVC,WAAY,IAAIK,KAAK,gBAErBJ,OAAQwB,IAGV,SAASA,EAA6C,GAA3BX,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC5CM,SAASC,cAAc,uBAAuBC,YAAiBd,GAAAA,OAAAA,GAC/DY,SAASC,cAAc,wBAAwBC,YAAiBV,GAAAA,OAAAA,GAChEQ,SAASC,cAAc,uBAAuBC,YAAiBT,GAAAA,OAAAA,GAC/DO,SAASC,cAAc,uBAAuBC,YAAiBR,GAAAA,OAAAA,GAGjEI,EAAMK","file":"src.bafbb25b.js","sourceRoot":"..\\src","sourcesContent":["// import timerTpl from './templates/timer.hbs';\nimport './sass/main.scss';\n\nclass CountdownTimer {\n  constructor({ selector, targetDate, onTick }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    // this.intervalId = null;\n    this.onTick = onTick;\n  }\n\n  startTimer() {\n    this.intervalId = setInterval(() => {\n      const currentDate = Date.now();\n      const deltaTime = this.targetDate - currentDate;\n      if (deltaTime <= 0) {\n        clearInterval(this.intervalId);\n        return;\n      }\n\n      const timeComponents = this.getTimeComponents(deltaTime);\n      this.onTick(timeComponents);\n\n      console.log(timeComponents);\n    }, 1000);\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Sep 27, 2021'),\n  // targetDate: new Date('May 21, 2021 17:17:00'),\n  onTick: updateTimerFace,\n});\n\nfunction updateTimerFace({ days, hours, mins, secs }) {\n  document.querySelector('[data-value=\"days\"]').textContent = `${days}`;\n  document.querySelector('[data-value=\"hours\"]').textContent = `${hours}`;\n  document.querySelector('[data-value=\"mins\"]').textContent = `${mins}`;\n  document.querySelector('[data-value=\"secs\"]').textContent = `${secs}`;\n}\n\ntimer.startTimer();\n\n// console.log();\n\n// const timerRef = document.querySelector('#timer-1');\n// const daysRef = document.querySelector('[data-value=\"days\"]');\n// const hoursRef = document.querySelector('[data-value=\"hours\"]');\n// const minutesRef = document.querySelector('[data-value=\"mins\"]');\n// const secondsRef = document.querySelector('[data-value=\"secs\"]');\n\n// // const timerMarkup = timerTpl();\n// // timerRef.insertAdjacentHTML('beforeend', timerMarkup);\n\n// const timer = {\n//   intervalId: null,\n\n//   startTimer() {\n//     const targetDate = new Date('Sep 27, 2021');\n\n//     this.intervalId = setInterval(() => {\n//       const currentDate = Date.now();\n//       const deltaTime = targetDate - currentDate;\n//       const timeComponents = getTimeComponents(deltaTime);\n//       // const { days, hours, mins, secs } = getTimeComponents(deltaTime);\n\n//       updateTimerFace(timeComponents);\n\n//       console.log(timeComponents);\n//       // console.log(`${days}:${hours}:${mins}:${secs}`);\n//     }, 1000);\n//   },\n// };\n\n// timer.startTimer();\n\n// function updateTimerFace({ days, hours, mins, secs }) {\n//   // timerRef.textContent = `${days}:${hours}:${mins}:${secs}`;\n//   daysRef.textContent = `${days}`;\n//   hoursRef.textContent = `${hours}`;\n//   minutesRef.textContent = `${mins}`;\n//   secondsRef.textContent = `${secs}`;\n// }\n\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// function getTimeComponents(time) {\n//   const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n//   const hours = pad(\n//     Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n//   );\n//   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//   return { days, hours, mins, secs };\n// }\n"]}